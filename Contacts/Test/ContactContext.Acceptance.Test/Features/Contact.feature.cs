// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ContactContext.Acceptance.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ContactManagerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Contact.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ContactManager", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ContactManager")))
            {
                global::ContactContext.Acceptance.Test.Features.ContactManagerFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding a New Contact Successfully")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ContactManager")]
        public void AddingANewContactSuccessfully()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a New Contact Successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
testRunner.Given("a customer with the following details:", "\t\t{\r\n\t\t\"FirstName\":\"Ahmad\",\r\n\t\t\"LastName\":\"Aghazadeh\",\r\n\t\t\"Phones\":\r\n\t\t\t[\r\n\t\t\t\t{\r" +
                        "\n\t\t\t\t\t\"Type\":\"Mobile\",\r\n\t\t\t\t\t\"Number\":\"09352185069\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"Type\":" +
                        "\"Mobile\",\r\n\t\t\t\t\t\"Number\":\"09352185059\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
testRunner.When("send a request to create the Contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
testRunner.Then("status code should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
testRunner.And("should have my Contact with following", "{\r\n\t\t\"FirstName\":\"Ahmad\",\r\n\t\t\"LastName\":\"Aghazadeh\",\r\n\t\t\"Phones\":\r\n\t\t[\r\n\t\t\t\t{\r\n\t\t" +
                        "\t\t\t\"Type\":\"Mobile\",\r\n\t\t\t\t\t\"Number\":\"09352185069\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"Type\":\"Mo" +
                        "bile\",\r\n\t\t\t\t\t\"Number\":\"09352185059\"\r\n\t\t\t\t}\r\n\t\t]\r\n\t\t}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Creating a new Contact with Invalid PhoneNumber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ContactManager")]
        public void CreatingANewContactWithInvalidPhoneNumber()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a new Contact with Invalid PhoneNumber", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 45
testRunner.Given("a customer with the following details:", "{\r\n\t\t\"FirstName\":\"Ahmad\",\r\n\t\t\"LastName\":\"Aghazadeh\",\r\n\t\t\"Phones\":\r\n\t\t[\r\n\t\t\t{\r\n\t\t\t" +
                        "\t\"Type\":\"Mobile\",\r\n\t\t\t\t\"Number\":\"093521\"\r\n\t\t\t}\r\n\t\t]\r\n\t\t}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
testRunner.When("send a request to create the Contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
testRunner.Then("status code should be BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
testRunner.And("the error message should be \"Phone Number Invalid Format Exception\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update a Contact Successfully")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ContactManager")]
        public void UpdateAContactSuccessfully()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a Contact Successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 66
testRunner.Given("Have a Contact with the following details:", "\t\t{\r\n\t\t\"FirstName\":\"Ahmad\",\r\n\t\t\"LastName\":\"Aghazadeh\",\r\n\t\t\"Phones\":\r\n\t\t\t[\r\n\t\t\t\t{\r" +
                        "\n\t\t\t\t\t\"Type\":\"Mobile\",\r\n\t\t\t\t\t\"Number\":\"09352185069\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"Type\":" +
                        "\"Mobile\",\r\n\t\t\t\t\t\"Number\":\"09352185059\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 84
testRunner.And("Prepare the Contact with the following details", "\t\t{\r\n\t\t\"FirstName\":\"Ahmad\",\r\n\t\t\"LastName\":\"Aghazadeh\",\r\n\t\t\"Phones\":\r\n\t\t\t[\r\n\t\t\t\t{\r" +
                        "\n\t\t\t\t\t\"Type\":\"Mobile\",\r\n\t\t\t\t\t\"Number\":\"09352185070\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"Type\":" +
                        "\"Mobile\",\r\n\t\t\t\t\t\"Number\":\"09352185055\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
testRunner.When("send a request update the Contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
testRunner.Then("status code should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
testRunner.And("should have my Contact with following", "{\r\n\t\t\"FirstName\":\"Ahmad\",\r\n\t\t\"LastName\":\"Aghazadeh\",\r\n\t\t\"Phones\":\r\n\t\t[\r\n\t\t\t{\r\n\t\t\t" +
                        "\t\"Type\":\"Mobile\",\r\n\t\t\t\t\"Number\":\"09352185070\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"Type\":\"Mobile\"," +
                        "\r\n\t\t\t\t\"Number\":\"09352185055\"\r\n\t\t\t}\r\n\t\t]\r\n\t\t}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete a Contact Successfully")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ContactManager")]
        public void DeleteAContactSuccessfully()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a Contact Successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 127
testRunner.Given("Have a Contact with the following details:", "\t\t{\r\n\t\t\"FirstName\":\"Ahmad\",\r\n\t\t\"LastName\":\"Aghazadeh\",\r\n\t\t\"Phones\":\r\n\t\t\t[\r\n\t\t\t\t{\r" +
                        "\n\t\t\t\t\t\"Type\":\"Mobile\",\r\n\t\t\t\t\t\"Number\":\"09352185069\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"Type\":" +
                        "\"Mobile\",\r\n\t\t\t\t\t\"Number\":\"09352185059\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 145
testRunner.When("send a request to delete the Contact with firstName \"Ahmad\" and lastName \"Aghazad" +
                        "eh\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
testRunner.Then("status code should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
testRunner.And("should dont find the Contact with firstName \"Ahmad\" and lastName \"Aghazadeh\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get Two Contacts Successfully")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ContactManager")]
        public void GetTwoContactsSuccessfully()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Two Contacts Successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 151
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 152
testRunner.Given("Have several Contacts with the following details:", @"  [{
	""FirstName"":""Ahmad"",
	""LastName"":""Aghazadeh"",
	""Phones"":
		[
			{
				""Type"":""Mobile"",
				""Number"":""09352185069""
			},
			{
				""Type"":""Mobile"",
				""Number"":""09352185059""
			}
		]
	},
	{
	""FirstName"":""Arad"",
	""LastName"":""Aghazadeh"",
	""Phones"":
		[
			{
				""Type"":""Mobile"",
				""Number"":""09303977077""
			} 
		]
	}
	]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 182
testRunner.When("send several requests to create the Contacts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 183
testRunner.Then("should have Contacts with following", @"  [{
	""FirstName"":""Ahmad"",
	""LastName"":""Aghazadeh"",
	""Phones"":
		[
			{
				""Type"":""Mobile"",
				""Number"":""09352185069""
			},
			{
				""Type"":""Mobile"",
				""Number"":""09352185059""
			}
		]
	},
	{
	""FirstName"":""Arad"",
	""LastName"":""Aghazadeh"",
	""Phones"":
		[
			{
				""Type"":""Mobile"",
				""Number"":""09303977077""
			} 
		]
	}
	]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
